/* sort the array */
func bubbleSort(integer arr[], integer size) : void
{
  var
  {
    integer n;
    integer i;
    integer j;
    integer temp;
  }
  n = size;
  i = 0;
  j = 0;
  temp = 0;
  while (i < n - 1) {
    while (j < n - i - 1) {
      if (arr[j] > arr[j + 1])
        then {
          // swap temp and arr[i]
          temp = arr[j];
          arr[j] = arr[j + 1];
          arr[j + 1] = temp;
        } else ;
        j = j + 1;
      };
    i = i + 1;
  };
}

/* Print the array */
func printArray(integer arr[], integer size) : void
{
  var
  {
    integer n;
    integer i;
  }
  n = size;
  n = n * 2 + 1;
  n = (n.j / (2 + 1 * 2)) + 1;
  i = 0;
  if (i > n) then {
    i = n - 1;
  } else {
    continue;
  };
  while (i < n){
    read(n);
    write(arr[i]);
      i = i+1;
  };
  while (i < n * 2 + 1) {


  };
  while (i > n) {
    break;
  };
}

// main funtion to test above
main
{
  arr[0] = 64;
  arr[1] = 34;
  arr[2] = 25;
  arr[3] = 12;
  arr[4] = 22;
  arr[5] = 11;
  arr[6] = 90;
  printarray(arr, 7);
  bubbleSort(arr, 7);
  printarray(arr, 7);
}

/*
    classes
    --------------------------------------
|X| no class declaration
| | class declaration
| | multiple class declarations
| | no data member declaration
| | data member declaration
| | multiple data member declaration
| | no member function declaration
| | member function declaration
| | multiple member function declaration
| | no member
| | no inherited class
| | one inherited class
| | multiple inherited classes
| | private member specifier
| | public member specifier
| | absence of member specifier

    functions: definitions
    --------------------------------------
| | no main function definition (not allowed)
|X| main function definition
| | multiple main function definitions (not allowed)
| | no free function definition
|X| free function definition
|X| multiple free function definitions
|X| no member function definition
| | member function definition
| | multiple member function definitions
|X| return type: void
| | return type: integer
| | return type: float
| | return type: string
| | return type: id
| | return type: array (not allowed)


    functions: formal parameters
    --------------------------------------
|X| type: integer
| | type: float
| | type: string
| | type: id
|X| type: 1-dim array
| | type: n-dim array
| | type: array (with size)
|X| type: array (without size)

    functions: calls
    --------------------------------------
|X| free function call
| | member function call
| | parameters:0
| | parameters:1
|X| parameters:n
|X| array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
| | function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
| | type: integer
| | type: float
| | type: string
| | type: id
| | type: 1-dim array
| | type: n-dim array
| | type: array (with size)
| | type: array (without size) (not allowed)

    function body: local variable declaration block
    --------------------------------------
|X| no local variable declarations block
| | local variable declaration block
| | multiple local variable declarations block (not allowed)
| | no variables in block
| | 1 variable declared in block
| | multiple variables declared in block

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
|X| n statements
|X| if statement
|X| if: empty then or else blocks
|X| if: 1-statement then or else blocks
|X| if: n-statements then or else blocks
|X| while statement
|X| while: empty block
|X| while: 1-statement block
|X| while: n-statement block
|X| read(<variable>) statement
|X| write(<expr>) statement
|X| return(<expr>) statement
|X| break statement
|X| continue statement
|X| assignment statement

    variable + idnest
    --------------------------------------
|X| id
|X| id.id
| | id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
|X| single variable
|X| involving addop
|X| involving multop
|X| involving relop
|X| involving addop + multop
|X| involving multop + relop
|X| involving addop + multop + relop
|X| involving parentheses
|X| involving nested parentheses
|X| involving ternary operator
|X| involving not
|X| involving sign
|X| involving literals
|X| involving variable + idnest
|X| involving function calls
| | involving all the above in one expression
*/